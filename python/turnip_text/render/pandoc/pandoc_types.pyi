# Autogenerated by generate_pandoc_typestub.py

from typing import Dict, List, Literal, Optional, Tuple

from typing_extensions import overload

class Pandoc:
    def __init__(self, arg0: "Meta", arg1: List["Block"]) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Meta": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List["Block"]: ...

class Block:
    pass

class Plain(Block):
    def __init__(self, arg0: List["Inline"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Inline"]: ...

class Para(Block):
    def __init__(self, arg0: List["Inline"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Inline"]: ...

class LineBlock(Block):
    def __init__(self, arg0: List[List["Inline"]]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List[List["Inline"]]: ...

class CodeBlock(Block):
    def __init__(self, arg0: "Attr", arg1: "Text") -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> "Text": ...

class RawBlock(Block):
    def __init__(self, arg0: "Format", arg1: "Text") -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Format": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> "Text": ...

class BlockQuote(Block):
    def __init__(self, arg0: List["Block"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Block"]: ...

class OrderedList(Block):
    def __init__(self, arg0: "ListAttributes", arg1: List[List["Block"]]) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "ListAttributes": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List[List["Block"]]: ...

class BulletList(Block):
    def __init__(self, arg0: List[List["Block"]]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List[List["Block"]]: ...

class DefinitionList(Block):
    def __init__(
        self, arg0: List[Tuple[List["Inline"], List[List["Block"]]]]
    ) -> None: ...
    def __getitem__(
        self, index: Literal[0]
    ) -> List[Tuple[List["Inline"], List[List["Block"]]]]: ...

class Header(Block):
    def __init__(self, arg0: "Int", arg1: "Attr", arg2: List["Inline"]) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Int": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[2]) -> List["Inline"]: ...

class HorizontalRule(Block):
    def __init__(
        self,
    ) -> None: ...

class Table(Block):
    def __init__(
        self,
        arg0: "Attr",
        arg1: "Caption",
        arg2: List["ColSpec"],
        arg3: "TableHead",
        arg4: List["TableBody"],
        arg5: "TableFoot",
    ) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> "Caption": ...
    @overload
    def __getitem__(self, index: Literal[2]) -> List["ColSpec"]: ...
    @overload
    def __getitem__(self, index: Literal[3]) -> "TableHead": ...
    @overload
    def __getitem__(self, index: Literal[4]) -> List["TableBody"]: ...
    @overload
    def __getitem__(self, index: Literal[5]) -> "TableFoot": ...

class Div(Block):
    def __init__(self, arg0: "Attr", arg1: List["Block"]) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List["Block"]: ...

class Null(Block):
    def __init__(
        self,
    ) -> None: ...

Attr = Tuple["Text", List["Text"], List[Tuple["Text", "Text"]]]
Text = str

class TableFoot:
    def __init__(self, arg0: "Attr", arg1: List["Row"]) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List["Row"]: ...

class Row:
    def __init__(self, arg0: "Attr", arg1: List["Cell"]) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List["Cell"]: ...

class Cell:
    def __init__(
        self,
        arg0: "Attr",
        arg1: "Alignment",
        arg2: "RowSpan",
        arg3: "ColSpan",
        arg4: List["Block"],
    ) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> "Alignment": ...
    @overload
    def __getitem__(self, index: Literal[2]) -> "RowSpan": ...
    @overload
    def __getitem__(self, index: Literal[3]) -> "ColSpan": ...
    @overload
    def __getitem__(self, index: Literal[4]) -> List["Block"]: ...

class ColSpan:
    def __init__(self, arg0: "Int") -> None: ...
    def __getitem__(self, index: Literal[0]) -> "Int": ...

Int = int

class RowSpan:
    def __init__(self, arg0: "Int") -> None: ...
    def __getitem__(self, index: Literal[0]) -> "Int": ...

class Alignment:
    pass

class AlignLeft(Alignment):
    def __init__(
        self,
    ) -> None: ...

class AlignRight(Alignment):
    def __init__(
        self,
    ) -> None: ...

class AlignCenter(Alignment):
    def __init__(
        self,
    ) -> None: ...

class AlignDefault(Alignment):
    def __init__(
        self,
    ) -> None: ...

class TableBody:
    def __init__(
        self, arg0: "Attr", arg1: "RowHeadColumns", arg2: List["Row"], arg3: List["Row"]
    ) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> "RowHeadColumns": ...
    @overload
    def __getitem__(self, index: Literal[2]) -> List["Row"]: ...
    @overload
    def __getitem__(self, index: Literal[3]) -> List["Row"]: ...

class RowHeadColumns:
    def __init__(self, arg0: "Int") -> None: ...
    def __getitem__(self, index: Literal[0]) -> "Int": ...

class TableHead:
    def __init__(self, arg0: "Attr", arg1: List["Row"]) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List["Row"]: ...

ColSpec = Tuple["Alignment", "ColWidth"]

class ColWidth:
    pass

class ColWidth_(ColWidth):
    def __init__(self, arg0: "Double") -> None: ...
    def __getitem__(self, index: Literal[0]) -> "Double": ...

class ColWidthDefault(ColWidth):
    def __init__(
        self,
    ) -> None: ...

Double = float

class Caption:
    def __init__(self, arg0: Optional["ShortCaption"], arg1: List["Block"]) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> Optional["ShortCaption"]: ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List["Block"]: ...

ShortCaption = List["Inline"]

class Inline:
    pass

class Str(Inline):
    def __init__(self, arg0: "Text") -> None: ...
    def __getitem__(self, index: Literal[0]) -> "Text": ...

class Emph(Inline):
    def __init__(self, arg0: List["Inline"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Inline"]: ...

class Underline(Inline):
    def __init__(self, arg0: List["Inline"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Inline"]: ...

class Strong(Inline):
    def __init__(self, arg0: List["Inline"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Inline"]: ...

class Strikeout(Inline):
    def __init__(self, arg0: List["Inline"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Inline"]: ...

class Superscript(Inline):
    def __init__(self, arg0: List["Inline"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Inline"]: ...

class Subscript(Inline):
    def __init__(self, arg0: List["Inline"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Inline"]: ...

class SmallCaps(Inline):
    def __init__(self, arg0: List["Inline"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Inline"]: ...

class Quoted(Inline):
    def __init__(self, arg0: "QuoteType", arg1: List["Inline"]) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "QuoteType": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List["Inline"]: ...

class Cite(Inline):
    def __init__(self, arg0: List["Citation"], arg1: List["Inline"]) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> List["Citation"]: ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List["Inline"]: ...

class Code(Inline):
    def __init__(self, arg0: "Attr", arg1: "Text") -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> "Text": ...

class Space(Inline):
    def __init__(
        self,
    ) -> None: ...

class SoftBreak(Inline):
    def __init__(
        self,
    ) -> None: ...

class LineBreak(Inline):
    def __init__(
        self,
    ) -> None: ...

class Math(Inline):
    def __init__(self, arg0: "MathType", arg1: "Text") -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "MathType": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> "Text": ...

class RawInline(Inline):
    def __init__(self, arg0: "Format", arg1: "Text") -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Format": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> "Text": ...

class Link(Inline):
    def __init__(self, arg0: "Attr", arg1: List["Inline"], arg2: "Target") -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List["Inline"]: ...
    @overload
    def __getitem__(self, index: Literal[2]) -> "Target": ...

class Image(Inline):
    def __init__(self, arg0: "Attr", arg1: List["Inline"], arg2: "Target") -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List["Inline"]: ...
    @overload
    def __getitem__(self, index: Literal[2]) -> "Target": ...

class Note(Inline):
    def __init__(self, arg0: List["Block"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Block"]: ...

class Span(Inline):
    def __init__(self, arg0: "Attr", arg1: List["Inline"]) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Attr": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List["Inline"]: ...

Target = Tuple["Text", "Text"]

class Format:
    def __init__(self, arg0: "Text") -> None: ...
    def __getitem__(self, index: Literal[0]) -> "Text": ...

class MathType:
    pass

class DisplayMath(MathType):
    def __init__(
        self,
    ) -> None: ...

class InlineMath(MathType):
    def __init__(
        self,
    ) -> None: ...

class Citation:
    def __init__(
        self,
        arg0: "Text",
        arg1: List["Inline"],
        arg2: List["Inline"],
        arg3: "CitationMode",
        arg4: "Int",
        arg5: "Int",
    ) -> None: ...
    @overload
    def __getitem__(self, index: Literal[0]) -> "Text": ...
    @overload
    def __getitem__(self, index: Literal[1]) -> List["Inline"]: ...
    @overload
    def __getitem__(self, index: Literal[2]) -> List["Inline"]: ...
    @overload
    def __getitem__(self, index: Literal[3]) -> "CitationMode": ...
    @overload
    def __getitem__(self, index: Literal[4]) -> "Int": ...
    @overload
    def __getitem__(self, index: Literal[5]) -> "Int": ...

class CitationMode:
    pass

class AuthorInText(CitationMode):
    def __init__(
        self,
    ) -> None: ...

class SuppressAuthor(CitationMode):
    def __init__(
        self,
    ) -> None: ...

class NormalCitation(CitationMode):
    def __init__(
        self,
    ) -> None: ...

class QuoteType:
    pass

class SingleQuote(QuoteType):
    def __init__(
        self,
    ) -> None: ...

class DoubleQuote(QuoteType):
    def __init__(
        self,
    ) -> None: ...

ListAttributes = Tuple["Int", "ListNumberStyle", "ListNumberDelim"]

class ListNumberDelim:
    pass

class DefaultDelim(ListNumberDelim):
    def __init__(
        self,
    ) -> None: ...

class Period(ListNumberDelim):
    def __init__(
        self,
    ) -> None: ...

class OneParen(ListNumberDelim):
    def __init__(
        self,
    ) -> None: ...

class TwoParens(ListNumberDelim):
    def __init__(
        self,
    ) -> None: ...

class ListNumberStyle:
    pass

class DefaultStyle(ListNumberStyle):
    def __init__(
        self,
    ) -> None: ...

class Example(ListNumberStyle):
    def __init__(
        self,
    ) -> None: ...

class Decimal(ListNumberStyle):
    def __init__(
        self,
    ) -> None: ...

class LowerRoman(ListNumberStyle):
    def __init__(
        self,
    ) -> None: ...

class UpperRoman(ListNumberStyle):
    def __init__(
        self,
    ) -> None: ...

class LowerAlpha(ListNumberStyle):
    def __init__(
        self,
    ) -> None: ...

class UpperAlpha(ListNumberStyle):
    def __init__(
        self,
    ) -> None: ...

class Meta:
    def __init__(self, arg0: Dict["Text", "MetaValue"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> Dict["Text", "MetaValue"]: ...

class MetaValue:
    pass

class MetaMap(MetaValue):
    def __init__(self, arg0: Dict["Text", "MetaValue"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> Dict["Text", "MetaValue"]: ...

class MetaList(MetaValue):
    def __init__(self, arg0: List["MetaValue"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["MetaValue"]: ...

class MetaBool(MetaValue):
    def __init__(self, arg0: "Bool") -> None: ...
    def __getitem__(self, index: Literal[0]) -> "Bool": ...

class MetaString(MetaValue):
    def __init__(self, arg0: "Text") -> None: ...
    def __getitem__(self, index: Literal[0]) -> "Text": ...

class MetaInlines(MetaValue):
    def __init__(self, arg0: List["Inline"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Inline"]: ...

class MetaBlocks(MetaValue):
    def __init__(self, arg0: List["Block"]) -> None: ...
    def __getitem__(self, index: Literal[0]) -> List["Block"]: ...

Bool = bool
